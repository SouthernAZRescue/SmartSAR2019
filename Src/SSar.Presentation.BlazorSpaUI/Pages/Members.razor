@page "/members"
@using System.Runtime.CompilerServices
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SSar.BC.MemberMgmt.Application.Queries
@inject IAccessTokenProvider AuthenticationService
@inject NavigationManager Navigation
@attribute [Authorize]

<h1>Members</h1>

@if (membersVm == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <SfGrid DataSource="@membersVm.Members" AllowPaging="true" AllowSorting="true" AllowFiltering="true"Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update" })" Height ="315">
        <GridPageSettings PageSize="50"></GridPageSettings>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
        <GridColumns>
            <GridColumn Field=@nameof(MemberDto.FirstName) HeaderText="First" TextAlign="TextAlign.Left" Width="40"></GridColumn>
            <GridColumn Field=@nameof(MemberDto.MiddleName) HeaderText="Middle" TextAlign="TextAlign.Left" Width="40"></GridColumn>
            <GridColumn Field=@nameof(MemberDto.LastName) HeaderText="Last" TextAlign="TextAlign.Left" Width="80"></GridColumn>
            <GridColumn Field=@nameof(MemberDto.Nickname) HeaderText="Nickname" TextAlign="TextAlign.Left" Width="40"></GridColumn>
        </GridColumns>
    </SfGrid>
}



@code {
    private MembersVm membersVm = new MembersVm();
    private IEnumerable<MemberDto> members;

    protected override async Task OnInitializedAsync()
    {
        var httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri(Navigation.BaseUri);

        var tokenResult = await AuthenticationService.RequestAccessToken();

        if (tokenResult.TryGetToken(out var token, redirect: true))
        {
            httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {token.Value}");
            membersVm = await httpClient.GetFromJsonAsync<MembersVm>("Members");
        }

        members = membersVm.Members.ToList();
    }
}
