@page "/members"
@using System.Runtime.CompilerServices
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SSar.BC.MemberMgmt.Application
@using SSar.BC.MemberMgmt.Application.Queries
@inject IAccessTokenProvider AuthenticationService
@inject NavigationManager Navigation
@attribute [Authorize]

<h1>Members</h1>

@if (memberMgmtVm == null)
{
    <p><em>Loading...</em></p>
}
else
{
<SfGrid DataSource="@memberMgmtVm.Members" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update" })" Height="315">
    <GridPageSettings PageSize="50"></GridPageSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
    <GridEvents 
                RowSelected="RowSelectedHandler" 
                OnCellSave="OnCellSaveHandler" 
                CommandClicked="OnCommandClickedHandler"
                OnToolbarClick="OnToolbarClickHandler"
                TValue="MemberDto">
    </GridEvents>
    <GridColumns>
        <GridColumn Field=@nameof(MemberDto.FirstName) HeaderText="First" TextAlign="TextAlign.Left" Width="40"></GridColumn>
        <GridColumn Field=@nameof(MemberDto.MiddleName) HeaderText="Middle" TextAlign="TextAlign.Left" Width="40"></GridColumn>
        <GridColumn Field=@nameof(MemberDto.LastName) HeaderText="Last" TextAlign="TextAlign.Left" Width="80"></GridColumn>
        <GridColumn Field=@nameof(MemberDto.Nickname) HeaderText="Nickname" TextAlign="TextAlign.Left" Width="40"></GridColumn>
    </GridColumns>
</SfGrid>
    <div>
        Status: @statusMessage
    </div>
}



@code {
    private MemberMgmtVm memberMgmtVm = new MemberMgmtVm();
    private IEnumerable<MemberDto> members;
    private string statusMessage = "Ready";
    private int eventCount;

    protected override async Task OnInitializedAsync()
    {
        var httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri(Navigation.BaseUri);

        var tokenResult = await AuthenticationService.RequestAccessToken();

        if (tokenResult.TryGetToken(out var token, redirect: true))
        {
            httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {token.Value}");
            memberMgmtVm = await httpClient.GetFromJsonAsync<MemberMgmtVm>("Members");
        }

        members = memberMgmtVm.Members.ToList();
    }

    protected void OnCommandClickedHandler(CommandClickEventArgs<MemberDto> args)
    {
        eventCount++;
        statusMessage = $"OnCommandClicked ({eventCount})";
    }

    protected void OnCellSaveHandler(CellSaveArgs<MemberDto> args)
    {
        eventCount++;
        statusMessage = $"OnCellSave fired ({eventCount})";
    }

    protected void RowSelectedHandler(RowSelectEventArgs<MemberDto> args)
    {
        eventCount++;
        statusMessage = $"RowSelected fired ({eventCount})";
    }

    protected void OnToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        eventCount++;
        statusMessage = $"OnToolbarClick fired ({eventCount})";
    }
}
